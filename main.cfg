 # Sample config file for the kelp bot
    # the trading account, this is the account that "owns" the trades (GDTAYRCNHUFVQWEE2Q7NK5DZAZSIPRECHUW6TFSMZANNIVGZ2PSAEE66)
    TRADING_SECRET_SEED="SCDW45BPJLP624HQCHXLFZIE67GTNB67DV3UNOGMCCOKJNEPOBG7WXZL"
    # the base asset and issuer.
    ASSET_CODE_A="XLM"
    # the counter (or quote) asset and issuer
    ASSET_CODE_B="ETH"
    ISSUER_B="GBVOL67TMUQBGL4TZYNMY3ZQ5WGQYFPFD5VJRWXR72VA33VFNL225PL5"
    # ASSET_CODE_B="EURT"
    # ISSUER_B="GAP5LETOV6YIE62YAM56STDANPRDO7ZFDBGSNHJQIYGGKSMOZAHOOS2S"
    # how often you want the bot to run
    TICK_INTERVAL_SECONDS=600
    # randomized interval delay in millis
    MAX_TICK_DELAY_MILLIS=0
    # the mode to use when submitting - maker_only, both (default)
    # when trading on a non-SDEX exchange the only supported mode is "both"
    SUBMIT_MODE="both"
    # how many continuous errors in each update cycle can the bot accept before it will delete all offers to protect its exposure.
    # this number has to be exceeded for all the offers to be deleted and any error will be counted only once per update cycle.
    # any time the bot completes a full run successfully this counter will be reset.
    # the bot will continue running even if it hits an error or deletes all offers.
    # the typical use case for this config value is to keep the orders on your orderbook intact if your price feed is unreachable for a small amount of time.
    # example: use -1 if you never want to delete all offers (this is not recommended).
    # example: use 0 if you want to delete all offers on any error.
    # example: use 2 if you want to tolerate 2 continuous update cycles with errors, i.e. 3 continuous update cycles with errors will delete all offers.
    DELETE_CYCLES_THRESHOLD=0
    # how many milliseconds to sleep before checking for fills again, a value of 0 disables fill tracking
    # fill tracking is not supported when trading on a non-SDEX exchange (i.e. set it to 0)
    FILL_TRACKER_SLEEP_MILLIS=10000
    # how many continuous errors in each fill-tracking cycle can the bot accept before it will delete all offers to protect its exposure.
    # this number has to be exceeded for all the offers to be deleted and any error will be counted only once per cycle.
    # any time the bot completes a full run successfully this counter will be reset.
    # the bot will continue running even if it hits an error or deletes all offers.
    # the typical use case for this config value is to keep the orders on your orderbook intact if you the endpoint to read fills is unreachable for a small amount of time.
    # example: use -1 if you never want to delete all offers (this is not recommended).
    # example: use 0 if you want to delete all offers on any error.
    # example: use 2 if you want to tolerate 2 continuous cycles with errors, i.e. 3 continuous cycles with errors will delete all offers.
    FILL_TRACKER_DELETE_CYCLES_THRESHOLD=0
    # the url for your horizon instance. If this url contains the string "test" then the bot assumes it is using the test network.
    HORIZON_URL="https://horizon.stellar.org"
    # the URL to use for your CCXT-rest instance. Defaults to http://localhost:3000 if unset
    CCXT_REST_URL="http://127.0.0.1:3000"
    # specify parameters for how we compute the operation fee from the /fee_stats endpoint
    [FEE]
    # trigger when "ledger_capacity_usage" in /fee_stats is >= this value
    CAPACITY_TRIGGER=0.8
    # percentile computation to use from /fee_stats (10, 20, ..., 90, 95, 99)
    PERCENTILE=90
    # max fee in stroops per operation to use
    MAX_OP_FEE_STROOPS=5000